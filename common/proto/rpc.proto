syntax = "proto3";
option go_package = "./;rpc";

service Worker {
  rpc Map (MapInfo) returns (Result); // 用于master节点向map节点派发任务
  rpc Reduce (ReduceInfo) returns(Result); // 用于master节点向reduce节点派发任务
  rpc End(Empty) returns (Empty); // 用于worker节点向master回应任务完成
  rpc Health(Empty) returns (WorkerState); // 用于master检测worker的存活状态
}

// 用于心跳检测
message Empty {

}
/* Result:
    当此节点为reduce节点时:
      1.一个节点上有多个传感器，一段时间内传感器会产生多份数据，每份数据都有很大概率结果不变，因此我们只需要返回数据范围即可
      2.因此数据中当dataName为传感器名，dataContent为传感器的数据范围
    当此节点为map节点时:
      1.一个节点会接受多个reduce节点的result数据，map节点要做的就是将相同(同名)的传感器内容merge，根据uuid编号，写入s3
      2.此时返回的数据内容为超出预警的传感器名，dataContent为超出的具体数值，如果未出现异常值，此时dataName为空
 */
message Result {
  string uuid = 1; // 返回节点的uuid，次id由master节点生成
  repeated string dataName = 2;
  repeated string dataContent = 3;
}

// master节点一次性给worker很多个s3的地址，worker完成Reduce后会将结果写入to中的Map节点去，由map节点报告master节点数据结果
message ReduceInfo {
  string uuid = 1;
  repeated string s3fileAddress = 2; // 此处对应的时s3://bucket/filename
  repeated string toMapAddress = 3; // 此处对应的时map节点的ip:port
}

// master会给map节点实时更新各类传感器的数据范围，以便于实时校对异常值
message MapInfo {
  string uuid = 1;
  repeated string dataName = 2;
  repeated string dataRange = 3;
}

message WorkerState {
  enum State {
    IDLE = 0;
    BUSY = 1;
  }
  State state = 1;
}